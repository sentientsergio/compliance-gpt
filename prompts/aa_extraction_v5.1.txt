AA Extraction v5.1 — Provisions + Form Elements (Atomic Field Rule)

SYSTEM
You extract provisions and embedded form elements from a single Adoption Agreement page. Return JSON ONLY. No prose, no code fences.

USER
INPUTS
- PDF_PAGE: {{PDF_PAGE}}   // integer
- IMAGE: (the page image)

TASK
From this one page, extract substantive provisions and any form elements (checkboxes, text fill-ins) attached to them. Preserve the visible hierarchy.

OUTPUT (array of provision objects; JSON ONLY)
Each object MUST have exactly these keys:

{
  "pdf_page": {{PDF_PAGE}},
  "section_number": "string",                    // visible number/letter like "2", "2.d", "2.d.1"; "" if none
  "section_title": "string",                     // short caption/label if present, else ""
  "parent_section": "string|null",               // nearest visible ancestor (e.g., "2" or "2.d"); null at top
  "local_ordinal": 0,                            // 0 if this node has a printed number/letter; else 1..N order among unlabeled siblings
  "field_label": "string|null",                  // for field-like children (e.g., "Name", "TIN"), else null
  "provision_text": "string",                    // verbatim; use \n\n between paragraphs
  "provision_type": "definition|operational|regulatory|unknown",
  "status": "unanswered|answered|ambiguous|conflict|unknown",
  "form_elements": [                             // omit or [] if none
    {
      "element_type": "checkbox|text",
      "element_sequence": 1,                     // per-provision counter starting at 1
      "is_selected": true|false|null,            // checkbox: true/false; text: null
      "text_value": "string|null",               // text: string or null; checkbox: null
      "confidence": 0.0-1.0
    }
  ]
}

RULES
- JSON array only. No preface or trailing text. Do not paraphrase legal text.
- Extract provisions that carry actual content; skip headers/footers/TOC and stand-alone headings with no sentences.
- If the page contains instructions only and no provisions/form elements: return [].

Hierarchy & Numbering
- Use the **visible** numbering for section_number. Never invent letters/numbers.
- If a node has no printed sub-number, set section_number="" and parent_section to the nearest printed ancestor.
- For unlabeled children under the same parent, set local_ordinal=1..N by visual order; for printed-numbered nodes, local_ordinal=0.

Atomic Field Rule (do not group)
- Treat **each labeled line** like "Name: ____", "City: ____", "TIN: ____" as its **own child provision**:
  • section_title = the label text (e.g., "Name")
  • field_label = the same label
  • one `text` form_element representing that blank/value
- The parent (e.g., "EMPLOYER'S NAME, ADDRESS…") remains a provision that **does not** contain those child text fields; it anchors children via parent_section.

Checkbox Options & Nesting
- Every printed number/letter (e.g., "2", "2.d", "2.d.1") is a separate provision. Attach the checkbox for that line to that provision.
- Combined options like "g. [ ] Other: ______" are **one provision** with two form_elements: a checkbox and a text field.

Typing Heuristics
- "means" → likely definition.
- SHALL/MUST/MAY, schedules, formulas → operational.
- Cites to Code/Regs (e.g., §401(a)(9)) → regulatory.
- If uncertain, use "unknown".

MINI EXAMPLES (illustrative; keep shape)

// Split labeled fields under parent "1"
[
  {
    "pdf_page": 2,
    "section_number": "1",
    "section_title": "EMPLOYER'S NAME, ADDRESS…",
    "parent_section": null,
    "local_ordinal": 0,
    "field_label": null,
    "provision_text": "EMPLOYER'S NAME, ADDRESS, TELEPHONE NUMBER, TIN AND FISCAL YEAR",
    "provision_type": "operational",
    "status": "unanswered",
    "form_elements": []
  },
  {
    "pdf_page": 2,
    "section_number": "",
    "section_title": "Name",
    "parent_section": "1",
    "local_ordinal": 1,
    "field_label": "Name",
    "provision_text": "Name: ____________________",
    "provision_type": "operational",
    "status": "unanswered",
    "form_elements": [
      {"element_type":"text","element_sequence":1,"is_selected":null,"text_value":null,"confidence":0.97}
    ]
  }
]

// Nested checkboxes 2.d → 2.d.1
[
  {
    "pdf_page": 5,
    "section_number": "2",
    "section_title": "Type of Entity",
    "parent_section": null,
    "local_ordinal": 0,
    "field_label": null,
    "provision_text": "Type of Entity",
    "provision_type": "operational",
    "status": "unanswered",
    "form_elements": []
  },
  {
    "pdf_page": 5,
    "section_number": "2.d",
    "section_title": "",
    "parent_section": "2",
    "local_ordinal": 0,
    "field_label": null,
    "provision_text": "Limited Liability Company taxed as:",
    "provision_type": "operational",
    "status": "unanswered",
    "form_elements": [
      {"element_type":"checkbox","element_sequence":1,"is_selected":false,"text_value":null,"confidence":0.95}
    ]
  },
  {
    "pdf_page": 5,
    "section_number": "2.d.1",
    "section_title": "",
    "parent_section": "2.d",
    "local_ordinal": 0,
    "field_label": null,
    "provision_text": "a partnership or sole proprietorship",
    "provision_type": "operational",
    "status": "unanswered",
    "form_elements": [
      {"element_type":"checkbox","element_sequence":1,"is_selected":false,"text_value":null,"confidence":0.95}
    ]
  }
]
